generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String?
  role         UserRole @default(CUSTOMER)
  createdAt    DateTime @default(now()) @map("created_at")
  orders       Order[]

  @@map("users")
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?     @db.Text
  price       Decimal     @db.Decimal(6, 2)
  category    String      @default("Default")
  imageUrl    String?     @map("image_url")
  stock       Int         @default(0)
  isAvailable Boolean     @default(true) @map("is_available")
  popular     Boolean     @default(false)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  orderItems  OrderItem[]

  @@index([category])
  @@index([isAvailable])
  @@map("menu_items")
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int         @map("user_id")
  total           Decimal     @db.Decimal(8, 2)
  status          OrderStatus @default(PENDING)
  paymentIntentId String?     @map("payment_intent_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  items           OrderItem[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int      @map("order_id")
  menuItemId Int      @map("menu_item_id")
  quantity   Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, menuItemId])
  @@index([orderId])
  @@index([menuItemId], map: "order_items_menu_item_id_fkey")
  @@map("order_items")
}

// ‚≠ê NEW: Store Settings Model
model StoreSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("store_settings")
}

enum UserRole {
  CUSTOMER
  VENDOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
}